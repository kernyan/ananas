#!/bin/sh
#
# This file generates include files and source code for the system calls. It
# uses 'awk' to warp syscalls.in into whatever form we need.
#
# XXX This code is ugly, mostly due to my awk(1) skills lacking...
#
if [ -z "$AWK" ]; then
	AWK=awk
fi

if [ -z "$4" ]; then
	echo "usage: gen_syscalls.sh syscall.in.S libc/kern/syscall.h include/syscalls.h kern/syscalls.inc.c"
	exit
fi

#
# for the userland part, generate wrapper functions that call the syscall, i.e.
#
#   1234 { void foo(int a, int b, int c)
#
# becomes
#
#   SYSCALL(foo)
#
$AWK '
	BEGIN {
		print "/* This file is automatically generated by gen_syscalls.sh - do not edit! */"
	}
	/^#/ { next; }
	/^[0-9]+/ {
		NR=$1
		FUNCNAME=substr($4, 1, index($4, "(") - 1)
		print ".globl sys_" FUNCNAME
		print ".type sys_" FUNCNAME",@function"
		print "sys_" FUNCNAME ":"
		print "\tSYSCALL(" NR ")"
	}
' < $1 > $2

#
# for the kernel, part 1, generate prototypes. i.e.
#
#   1234 { void foo(int a, int b, int c)
#
# becomes
#
#   #define SYSCALL_foo 1234
#   void sys_foo(Thread* curthread, int a, int b, int c);
#
$AWK '
	BEGIN {
		print "/* This file is automatically generated by gen_syscalls.sh - do not edit! */";
		print "#ifdef KERNEL"
		print " #define ARG_CURTHREAD Thread* curthread,"
		print "#else"
		print " #define ARG_CURTHREAD"
		print "#endif"
	}
	/^#/ { next; }
	/^[0-9]+/ {
		print "#define SYSCALL_" substr($4, 1, index($4, "(") - 1) " "$1;
		print $3 " sys_" substr($4, 1, index($4, "(")) "ARG_CURTHREAD " substr($0, index($0, "(") + 1, index($0, "}") - index($0, "(") - 1)
	}
' < $1 > $3

#
#
# for the kernel, part 2, generate function calls. i.e.
#
#   1234 { void foo(int a, int b, int c); }
#   4321 { errorcode_t bar(int a); }
#
# becomes
#
#   case 1234: sys_foo(curthread, (int)a->arg1, (int)a->arg2, (int)a->arg3); return ananas_success();
#   case 4321: return (errorcode_t)sys_bar(curthread, (int)a->arg1);
#
$AWK '
	/^#/ { next; }
	/^[0-9]+/ {
		# get the function prototype, this is the part between { }
		PROTOTYPE=substr($0, index($0, "{") + 1, index($0, ";") - index($0, "{") - 1)
		gsub(/^[ \t]+/, "", PROTOTYPE)
		FULLARGS=substr(PROTOTYPE, index(PROTOTYPE, "(") + 1, index(PROTOTYPE, ")") - index(PROTOTYPE, "(") - 1)
		numargs=split(FULLARGS, A, ",")

		FUNCNAME=substr(PROTOTYPE, length($3) + 1)
		FUNCNAME=substr(FUNCNAME, 1, index(FUNCNAME, "(") - 1)
		gsub(/^[ \t]+/, "", FUNCNAME)

		ARGS="curthread"
		for (x = 1; x <= numargs; x++) {
			N=split(A[x], FIELD, " ")
			TYPE=""
			for (i = 1; i < N; i++) TYPE=TYPE " " FIELD[i]
			gsub(/^ /, "", TYPE)
			ARGS = ARGS ",(" TYPE ")a->arg" x
		}

		print "case "$1": "
		if ($3 == "void")
			print "\tsys_" FUNCNAME "(" ARGS "); return ananas_success();"
		else
			print "\treturn (register_t)sys_" FUNCNAME "(" ARGS ");"
	}
' < $1 > $4
